

// Spacing
  $spacer: 1rem;
  $spacer-x: $spacer;
  $spacer-y: $spacer;
  $spacers: (
    0: (
      x: 0,
      y: 0
    ),
    1: (
      x: ($spacer-x * .25),
      y: ($spacer-y * .25)
    ),
    2: (
      x: ($spacer-x * .5),
      y: ($spacer-y * .5)
    ),
    3: (
      x: $spacer-x,
      y: $spacer-y
    ),
    4: (
      x: ($spacer-x * 1.5),
      y: ($spacer-y * 1.5)
    ),
    5: (
      x: ($spacer-x * 3),
      y: ($spacer-y * 3)
    )
  );

// Borders
  $border-width: 1px;
  $border-style: solid;
  $border-styles: (
    none,
    hidden,
    dotted,
    dashed,
    solid,
    double,
    groove,
    ridge,
    inset,
    outset
  );
  $border-colors: (
    default: #e7e7e7,
    primary: $brand-primary,
    success: $brand-success,
    info: $brand-info,
    warning: $brand-warning,
    danger: $brand-danger,
    "white": $white
  );

// Sizes
  $sizes: (
    25: 25%,
    50: 50%,
    75: 75%,
    100: 100%
  );

// Grid

 
  // Define the maximum width of `.container` for different screen sizes.
  $container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px
  );

  $grid-columns: 12;
  $grid-gap-width-base: 30px;
  $grid-gap-widths: (
    xs: $grid-gap-width-base,
    sm: $grid-gap-width-base,
    md: $grid-gap-width-base,
    lg: $grid-gap-width-base,
    xl: $grid-gap-width-base
  );



  $headings-font-size: (
    1: 2.5rem,
    2: 2rem,
    3: 1.75rem,
    4: 1.5rem,
    5: 1.25rem,
    6: 1rem
  );

  $headings-margin-bottom: ($spacer / 2);
  $headings-font-family: inherit;
  $headings-font-weight: 500;
  $headings-line-height: 1.1;
  $headings-color: inherit;

  $hr-border-color: rgba($black,.1);
  $hr-border-width: 2px;

  $paragraph-color: #777;

  $lead-font-size: 1.25rem;
  $lead-font-weight: 300;

  $small-font-size: 80%;
  $small-font-weight: $font-weight-normal;

  $mark-padding: .2em;
  $mark-bg: #fcf8e3;
  $mark-color: $gray;

  $list-inline-padding: 5px;

  $text-muted: $gray-light;

  $abbr-border-color: $gray-light !default;

  $blockquote-small-color: $gray-light !default;
  $blockquote-font-size: ($font-size-base * 1.25) !default;
  $blockquote-border-color: $gray-lighter !default;
  $blockquote-border-width: .25rem !default;

  $dt-font-weight: $font-weight-bold;

  $kbd-box-shadow: inset 0 -.1rem 0 rgba($black,.25) !default;
  $nested-kbd-font-weight: $font-weight-bold !default;

// Components
//
// Define common padding and border radius sizes and more.

  $line-height-lg:     (4 / 3) !default;
  $line-height-sm:         1.5 !default;

  $border-radius:          .25rem !default;
  $border-radius-lg:       .3rem !default;
  $border-radius-sm:       .2rem !default;

  $component-active-color: $white !default;
  $component-active-bg:    $brand-primary !default;

  $caret-width:            .3em !default;

  $transition-base:        all .2s ease-in-out !default;
  $transition-fade:        opacity .15s linear !default;
  $transition-collapse:    height .35s ease !default;


// Image thumbnails

  $thumbnail-padding:           .25rem !default;
  $thumbnail-bg:                $body-bg !default;
  $thumbnail-border-width:      $border-width !default;
  $thumbnail-border-color:      #ddd !default;
  $thumbnail-border-radius:     $border-radius !default;
  $thumbnail-box-shadow:        0 1px 2px rgba($black,.075) !default;
  $thumbnail-transition:        all .2s ease-in-out !default;

// Tables
//
// Customizes the `.table` component with basic values, each used across all table variations.

  $table-cell-padding: .75rem;
  $table-sm-cell-padding: .3rem !default;

  $table-bg: transparent;

  $table-inverse-bg: $gray-dark !default;
  $table-inverse-color: $body-bg !default;

  $table-bg-accent: rgba($black,.05) !default;
  $table-bg-hover: rgba($black,.075) !default;
  $table-bg-active: $table-bg-hover !default;

  $table-head-bg: $gray-lighter !default;
  $table-head-color: $gray !default;

  $table-border-width: $border-width !default;
  $table-border-color: $gray-lighter !default;


// Buttons
//
// For each of Bootstrap's buttons, define text, background and border color.

  $btn-padding-x:                  1rem !default;
  $btn-padding-y:                  .5rem !default;
  $btn-line-height:                1.25 !default;
  $btn-font-weight:                $font-weight-normal !default;
  $btn-box-shadow:                 inset 0 1px 0 rgba($white,.15), 0 1px 1px rgba($black,.075) !default;
  $btn-focus-box-shadow:           0 0 0 2px rgba($brand-primary, .25) !default;
  $btn-active-box-shadow:          inset 0 3px 5px rgba($black,.125) !default;

  $btn-primary-color:              $white !default;
  $btn-primary-bg:                 $brand-primary !default;
  $btn-primary-border:             $btn-primary-bg !default;

  $btn-secondary-color:            $gray-dark !default;
  $btn-secondary-bg:               $white !default;
  $btn-secondary-border:           #ccc !default;

  $btn-info-color:                 $white !default;
  $btn-info-bg:                    $brand-info !default;
  $btn-info-border:                $btn-info-bg !default;

  $btn-success-color:              $white !default;
  $btn-success-bg:                 $brand-success !default;
  $btn-success-border:             $btn-success-bg !default;

  $btn-warning-color:              $white !default;
  $btn-warning-bg:                 $brand-warning !default;
  $btn-warning-border:             $btn-warning-bg !default;

  $btn-danger-color:               $white !default;
  $btn-danger-bg:                  $brand-danger !default;
  $btn-danger-border:              $btn-danger-bg !default;

  $btn-link-disabled-color:        $gray-light !default;

  $btn-padding-x-sm:               .5rem !default;
  $btn-padding-y-sm:               .25rem !default;

  $btn-padding-x-lg:               1.5rem !default;
  $btn-padding-y-lg:               .75rem !default;

  $btn-block-spacing-y:            .5rem !default;
  $btn-toolbar-margin:             .5rem !default;

  // Allows for customizing button radius independently from global border radius
  $btn-border-radius:              $border-radius !default;
  $btn-border-radius-lg:           $border-radius-lg !default;
  $btn-border-radius-sm:           $border-radius-sm !default;

  $btn-transition:                 all .2s ease-in-out !default;


// Forms

  $input-padding-x:                .75rem !default;
  $input-padding-y:                .5rem !default;
  $input-line-height:              1.25 !default;

  $input-bg:                       $white !default;
  $input-bg-disabled:              $gray-lighter !default;

  $input-color:                    $gray !default;
  $input-border-color:             rgba($black,.15) !default;
  $input-btn-border-width:         $border-width !default; // For form controls and buttons
  $input-box-shadow:               inset 0 1px 1px rgba($black,.075) !default;

  $input-border-radius:            $border-radius !default;
  $input-border-radius-lg:         $border-radius-lg !default;
  $input-border-radius-sm:         $border-radius-sm !default;

  $input-bg-focus:                 $input-bg !default;
  $input-border-focus:             lighten($brand-primary, 25%) !default;
  $input-box-shadow-focus:         $input-box-shadow, rgba($input-border-focus, .6) !default;
  $input-color-focus:              $input-color !default;

  $input-color-placeholder:        $gray-light !default;

  $input-padding-x-sm:             .5rem !default;
  $input-padding-y-sm:             .25rem !default;

  $input-padding-x-lg:             1.5rem !default;
  $input-padding-y-lg:             .75rem !default;

  $input-height:                   (($font-size-base * $input-line-height) + ($input-padding-y * 2)) !default;
  $input-height-lg:                (($font-size-lg * $line-height-lg) + ($input-padding-y-lg * 2)) !default;
  $input-height-sm:                (($font-size-sm * $line-height-sm) + ($input-padding-y-sm * 2)) !default;

  $input-transition:               border-color ease-in-out .15s, box-shadow ease-in-out .15s !default;

  $form-text-margin-top:     .25rem !default;
  $form-feedback-margin-top: $form-text-margin-top !default;

  $form-check-margin-bottom:  .5rem !default;
  $form-check-input-gap:   1.25rem !default;
  $form-check-input-margin-y: .25rem !default;
  $form-check-input-margin-x: .25rem !default;

  $form-check-inline-margin-x: .75rem !default;

  $form-group-margin-bottom:       $spacer-y !default;

  $input-group-addon-bg:           $gray-lighter !default;
  $input-group-addon-border-color: $input-border-color !default;

  $cursor-disabled: not-allowed;

  $custom-control-gutter:   1.5rem !default;
  $custom-control-spacer-x: 1rem !default;
  $custom-control-spacer-y: .25rem !default;

  $custom-control-indicator-size:       1rem !default;
  $custom-control-indicator-margin-y:   (($line-height-base * 1rem) - $custom-control-indicator-size) / -2 !default;
  $custom-control-indicator-bg:         #ddd !default;
  $custom-control-indicator-bg-size:    50% 50% !default;
  $custom-control-indicator-box-shadow: inset 0 .25rem .25rem rgba($black,.1) !default;

  $custom-control-disabled-cursor:             $cursor-disabled !default;
  $custom-control-disabled-indicator-bg:       $gray-lighter !default;
  $custom-control-disabled-description-color:  $gray-light !default;

  $custom-control-checked-indicator-color:      $white !default;
  $custom-control-checked-indicator-bg:         $brand-primary !default;
  $custom-control-checked-indicator-box-shadow: none !default;

  $custom-control-focus-indicator-box-shadow: 0 0 0 1px $body-bg, 0 0 0 3px $brand-primary !default;

  $custom-control-active-indicator-color:      $white !default;
  $custom-control-active-indicator-bg:         lighten($brand-primary, 35%) !default;
  $custom-control-active-indicator-box-shadow: none !default;

  $custom-checkbox-radius: $border-radius !default;
  $custom-checkbox-checked-icon: str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='#{$custom-control-checked-indicator-color}' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E"), "#", "%23") !default;

  $custom-checkbox-indeterminate-bg: $brand-primary !default;
  $custom-checkbox-indeterminate-indicator-color: $custom-control-checked-indicator-color !default;
  $custom-checkbox-indeterminate-icon: str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='#{$custom-checkbox-indeterminate-indicator-color}' d='M0 2h4'/%3E%3C/svg%3E"), "#", "%23") !default;
  $custom-checkbox-indeterminate-box-shadow: none !default;

  $custom-radio-radius: 50% !default;
  $custom-radio-checked-icon: str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='#{$custom-control-checked-indicator-color}'/%3E%3C/svg%3E"), "#", "%23") !default;

  $custom-select-padding-x:          .75rem  !default;
  $custom-select-padding-y:          .375rem !default;
  $custom-select-indicator-padding:   1rem !default; // Extra padding to account for the presence of the background-image based indicator
  $custom-select-line-height:         $input-line-height !default;
  $custom-select-color:               $input-color !default;
  $custom-select-disabled-color:      $gray-light !default;
  $custom-select-bg:            $white !default;
  $custom-select-disabled-bg:   $gray-lighter !default;
  $custom-select-bg-size:       8px 10px !default; // In pixels because image dimensions
  $custom-select-indicator-color: #333 !default;
  $custom-select-indicator:     str-replace(url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$custom-select-indicator-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E"), "#", "%23") !default;
  $custom-select-border-width:  $input-btn-border-width !default;
  $custom-select-border-color:  $input-border-color !default;
  $custom-select-border-radius: $border-radius !default;

  $custom-select-focus-border-color: lighten($brand-primary, 25%) !default;
  $custom-select-focus-box-shadow:   inset 0 1px 2px rgba($black, .075), 0 0 5px rgba($custom-select-focus-border-color, .5) !default;

  $custom-select-sm-padding-y:  .2rem !default;
  $custom-select-sm-font-size:  75% !default;

  $custom-file-height:           2.5rem !default;
  $custom-file-width:            14rem !default;
  $custom-file-focus-box-shadow: 0 0 0 .075rem $white, 0 0 0 .2rem $brand-primary !default;

  $custom-file-padding-x:     .5rem !default;
  $custom-file-padding-y:     1rem !default;
  $custom-file-line-height:   1.5 !default;
  $custom-file-color:         $gray !default;
  $custom-file-bg:            $white !default;
  $custom-file-border-width:  $border-width !default;
  $custom-file-border-color:  $input-border-color !default;
  $custom-file-border-radius: $border-radius !default;
  $custom-file-box-shadow:    inset 0 .2rem .4rem rgba($black,.05) !default;
  $custom-file-button-color:  $custom-file-color !default;
  $custom-file-button-bg:     $gray-lighter !default;
  $custom-file-text: (
    placeholder: (
      en: "Choose file..."
    ),
    button-label: (
      en: "Browse"
    )
  ) !default;


// Z-index master list
//
// Warning: Avoid customizing these values. They're used for a bird's eye view
// of components dependent on the z-axis and are designed to all work together.

  $zindex-dropdown-backdrop:  990 !default;
  $zindex-navbar:             1000 !default;
  $zindex-dropdown:           1000 !default;
  $zindex-fixed:              1030 !default;
  $zindex-sticky:             1030 !default;
  $zindex-modal-backdrop:     1040 !default;
  $zindex-modal:              1050 !default;
  $zindex-popover:            1060 !default;
  $zindex-tooltip:            1070 !default;

// Form states and alerts
//
// Define colors for form feedback states and, by default, alerts.

  $state-success-text:             #3c763d !default;
  $state-success-bg:               #dff0d8 !default;
  $state-success-border:           darken($state-success-bg, 5%) !default;

  $state-info-text:                #31708f !default;
  $state-info-bg:                  #d9edf7 !default;
  $state-info-border:              darken($state-info-bg, 7%) !default;

  $state-warning-text:             #8a6d3b !default;
  $state-warning-bg:               #fcf8e3 !default;
  $state-warning-border:           darken($state-warning-bg, 5%) !default;

  $state-danger-text:              #a94442 !default;
  $state-danger-bg:                #f2dede !default;
  $state-danger-border:            darken($state-danger-bg, 5%) !default;


// Alerts
//
// Define alert colors, border radius, and padding.

  $alert-padding-x:             1.25rem !default;
  $alert-padding-y:             .75rem !default;
  $alert-margin-bottom:         $spacer-y !default;
  $alert-border-radius:         $border-radius !default;
  $alert-link-font-weight:      $font-weight-bold !default;
  $alert-border-width:          $border-width !default;

  $alert-success-bg:            $state-success-bg !default;
  $alert-success-text:          $state-success-text !default;
  $alert-success-border:        $state-success-border !default;

  $alert-info-bg:               $state-info-bg !default;
  $alert-info-text:             $state-info-text !default;
  $alert-info-border:           $state-info-border !default;

  $alert-warning-bg:            $state-warning-bg !default;
  $alert-warning-text:          $state-warning-text !default;
  $alert-warning-border:        $state-warning-border !default;

  $alert-danger-bg:             $state-danger-bg !default;
  $alert-danger-text:           $state-danger-text !default;
  $alert-danger-border:         $state-danger-border !default;


// Figures

  $figure-caption-font-size: 90% !default;
  $figure-caption-color:     $gray-light !default;


// Code

  $code-font-size:              90% !default;
  $code-padding-x:              .4rem !default;
  $code-padding-y:              .2rem !default;
  $code-color:                  #bd4147 !default;
  $code-bg:                     $gray-lighter !default;

  $kbd-color:                   $white !default;
  $kbd-bg:                      $gray-dark !default;

  $pre-bg:                      $gray-lighter !default;
  $pre-color:                   $gray-dark !default;
  $pre-border-color:            #ccc !default;
  $pre-scrollable-max-height:   340px !default;

// Utilities

  @mixin paint-box($color, $background) {
    color: $color;
    background-color: $background
  }

  @mixin make-links($color, $decoration, $background: false) {
    color: $color;
    text-decoration: $decoration;
    @if $background {
      background-color: $background;
    }
  }



  @mixin space-axis($abbr, $first, $second) {
    @if $abbr == my {
      margin-top: $first;
      @if $second {
        margin-bottom: $second;
      } @else {
        margin-bottom: $first;
      }
    }@else if $abbr == mx {
      margin-left: $first;
      @if $second {
        margin-right: $second;
      } @else {
        margin-right: $first;
      }
    } @else if $abbr == py {
      padding-top: $first;
      @if $second {
        padding-bottom: $second;
      } @else {
        padding-bottom: $first;
      }
    }@else if $abbr == px {
      padding-left: $first;
      @if $second {
        padding-right: $second;
      } @else {
        padding-right: $first;
      }
    }
  }

  @mixin text-hide() {
    // CSS image replacement
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
  }

  // Single side border-radius

  @mixin border-radius($radius: $border-radius) {
    border-radius: $radius;
  }

  @mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
  }

  @mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
  }

  @mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }

  @mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
  }

  @mixin clearfix() {
    &::after {
      display: block;
      content: "";
      clear: both;
    }
  }

  @mixin float-left {
    float: left !important;
  }
  @mixin float-right {
    float: right !important;
  }
  @mixin float-none {
    float: none !important;
  }

  // Visibility
  @mixin invisible {
    visibility: hidden !important;
  }

  // Responsive image
  //
  // Keep images from scaling beyond the width of their parents.

  @mixin img-fluid {
    // Part 1: Set a maximum relative to the parent
    max-width: 100%;
    // Part 2: Override the height to auto, otherwise images will be stretched
    // when setting a width and height attribute on the img element.
    height: auto;
  }

// Layout
  @mixin make-container($gaps: $grid-gap-widths) {
    margin: 0 auto;
    @each $breakpoint in map-keys($gaps) {
      @include media-breakpoint-up($breakpoint) {
        $gap: map-get($gaps, $breakpoint);
        padding-right: ($gap / 2);
        padding-left:  ($gap / 2);
      }
    }
  }
  @mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        width: $container-max-width;
        max-width: 100%;
      }
    }
  }

  @mixin make-row($gaps: $grid-gap-widths) {
    @each $breakpoint in map-keys($gaps) {
      @include media-breakpoint-up($breakpoint) {
        $gap: map-get($gaps, $breakpoint);
        margin-right: ($gap / -2);
        margin-left:  ($gap / -2);
      }
    }
  }

  @mixin make-gaps($gaps: $grid-gap-widths) {
    @each $breakpoint in map-keys($gaps) {
      @include media-breakpoint-up($breakpoint) {
        $gap: map-get($gaps, $breakpoint);
        padding-right: ($gap / 2);
        padding-left:  ($gap / 2);
      }
    }
  }

  @mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // width: percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $columns);
  }

  @mixin make-col-offset($size, $columns: $grid-columns) {
    margin-left: percentage($size / $columns);
  }

  @mixin make-col-push($size, $columns: $grid-columns) {
    left: if($size > 0, percentage($size / $columns), auto);
  }

  @mixin make-col-pull($size, $columns: $grid-columns) {
    right: if($size > 0, percentage($size / $columns), auto);
  }

  @mixin make-col-modifier($type, $size, $columns) {
    // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
    @if $type == push {
      @include make-col-push($size, $columns);
    } @else if $type == pull {
      @include make-col-pull($size, $columns);
    } @else if $type == offset {
      @include make-col-offset($size, $columns);
    }
  }

  @mixin make-grid-columns($columns: $grid-columns, $gaps: $grid-gap-widths, $breakpoints: $grid-breakpoints) {
    // Common properties for all breakpoints
    %grid-column {
      position: relative;
      width: 100%;
      min-height: 1px; // Prevent columns from collapsing when empty
      float: left;

      @include make-gaps($gaps);
    }
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);

      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
      .col#{$infix} {
        @extend %grid-column;
      }

      @include media-breakpoint-up($breakpoint, $breakpoints) {
        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        .col#{$infix} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
        .col#{$infix}-auto {
          flex: 0 0 auto;
          width: auto;
        }

        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }

        @each $modifier in (pull, push) {
          @for $i from 0 through $columns {
            .#{$modifier}#{$infix}-#{$i} {
              @include make-col-modifier($modifier, $i, $columns)
            }
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-xs-0
            .offset#{$infix}-#{$i} {
              @include make-col-modifier(offset, $i, $columns)
            }
          }
        }
      }
    }
  }

// Components

// Typography

  @mixin set-font($font-family: null, $font-size: null, $font-weight: null, $line-height: null) {
    font: {
      @if $font-family {
        family: $font-family;
      }
      @if $font-size {
        size: $font-size;
      }
      @if $font-weight {
        weight: $font-weight-base;
      }
    }
    @if $line-height {
      line-height: $line-height-base;
    }
  }

  @mixin make-headings() {
    %headings {
      margin-bottom: $headings-margin-bottom;
      @include set-font($headings-font-family, null, $headings-font-weight, $headings-line-height);
      color: $headings-color;
    }
    @for $i from 1 through 6 {
      h#{$i}, .h#{$i} {
        @extend %headings;
      }
    }
    @each $h, $size in $headings-font-size {
      h#{$h}, .h#{$h} {
        font-size: $size;
      }
    } 
  }

  // Lists

  // Unstyled keeps list items block level, just removes default browser padding and list-style
  @mixin list-unstyled {
    padding-left: 0;
    list-style: none;
  }

// Forms
// Form validation states
//
// Used in _forms.scss to generate the form validation CSS for warnings, errors,
// and successes.

@mixin form-control-validation($color) {
  // Color the label and help text
  .form-control-feedback,
  .form-control-label,
  .col-form-label,
  .form-check-label,
  .custom-control {
    color: $color;
  }

  // Set the border and box shadow on specific inputs to match
  .form-control {
    border-color: $color;

    &:focus {
      //@include box-shadow($input-box-shadow, 0 0 6px lighten($color, 20%));
    }
  }

  // Set validation states also for addons
  .input-group-addon {
    color: $color;
    border-color: $color;
    background-color: lighten($color, 40%);
  }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  @include border-radius($border-radius);
}

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($color, $background, $border) {
  $active-background: darken($background, 10%);
  $active-border: darken($border, 12%);

  color: $color;
  background-color: $background;
  border-color: $border;
  //@include box-shadow($btn-box-shadow);

  // Hover and focus styles are shared
  @include hover {
    color: $color;
    background-color: $active-background;
    border-color: $active-border;
  }
  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
   /* @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 2px rgba($border, .5);
    } @else {
      box-shadow: 0 0 0 2px rgba($border, .5);
    }*/
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    background-color: $background;
    border-color: $border;
  }

  &:active,
  &.active,
  .show > &.dropdown-toggle {
    color: $color;
    background-color: $active-background;
    background-image: none; // Remove the gradient for the pressed/active state
    border-color: $active-border;
    //@include box-shadow($btn-active-box-shadow);
  }
}

@mixin button-outline-variant($color, $color-hover: #fff) {
  color: $color;
  background-image: none;
  background-color: transparent;
  border-color: $color;

  @include hover {
    color: $color-hover;
    background-color: $color;
    border-color: $color;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 2px rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:active,
  &.active,
  .show > &.dropdown-toggle {
    color: $color-hover;
    background-color: $color;
    border-color: $color;
  }
}


























// End base

// Grid

//
// Container
//

.container {
  @include make-container();
  @include make-container-max-widths();
}

.row {
  @include make-row();
}

@include make-grid-columns();

// End Grid

// Typography

//
// Headings
//

@include make-headings();

//
// Horizontal rules
//

hr {
  margin-top: $spacer-y;
  margin-bottom: $spacer-y;
  border: 0;
  border-top: $hr-border-width solid $hr-border-color;
}

// Paragrph
//

p {
  color: $paragraph-color;
  &.lead {
    @include set-font(null, $lead-font-size, $lead-font-weight);
  }
}

//
// Emphasis
//

small,
.small {
  @include set-font(null, $small-font-size, $small-font-weight);
}

mark,
.mark {
  padding: $mark-padding;
  @include paint-box($mark-color, $mark-bg);
}

//
// Lists
//

.list-unstyled {
  @include list-unstyled;
}

// Inline turns list items into inline-block
.list-inline {
  @include list-unstyled;
  > li {
    display: inline-block;

    &:not(:last-child) {
      margin-right: $list-inline-padding;
    }
  }
}

//
// Misc
//

// Builds on `abbr`
.initialism {
  font-size: 90%;
  text-transform: uppercase;
}

// Blockquotes
.blockquote {
  padding: ($spacer / 2) $spacer;
  margin-bottom: $spacer;
  font-size: $blockquote-font-size;
  border-left: $blockquote-border-width solid $blockquote-border-color;
}

.blockquote-footer {
  display: block;
  font-size: 80%; // back to default font-size
  color: $blockquote-small-color;

  &::before {
    content: "\2014 \00A0"; // em dash, nbsp
  }
}

// Opposite alignment of blockquote
.blockquote-reverse {
  @include space-axis(px, 0, $spacer);
  text-align: right;
  border-right: $blockquote-border-width solid $blockquote-border-color;
  border-left: 0;
}

.blockquote-reverse .blockquote-footer {
  &::before {
    content: "";
  }
  &::after {
    content: "\00A0 \2014"; // nbsp, em dash
  }
}

//
// Code
//

// Inline and block code styles
code,
kbd,
pre,
samp {
  font-family: $font-family-monospace;
}

// Blocks of code
pre {
  display: block;
  margin-top: 0;
  margin-bottom: 1rem;
  font-size: $code-font-size;
  color: $pre-color;

  // Account for some code outputs that place code tags in pre tags
  code {
    padding: 0;
    font-size: inherit;
    color: inherit;
    background-color: transparent;
    border-radius: 0;
  }
}

// Enable scrollable blocks of code
.pre-scrollable {
  max-height: $pre-scrollable-max-height;
  overflow-y: scroll;
}

// Inline code
code {
  padding: $code-padding-y $code-padding-x;
  font-size: $code-font-size;
  color: $code-color;
  background-color: $code-bg;
  @include border-radius($border-radius);

  // Streamline the style when inside anchors to avoid broken underline and more
  a > & {
    padding: 0;
    color: inherit;
    background-color: inherit;
  }
}

// User input typically entered via keyboard
kbd {
  padding: $code-padding-y $code-padding-x;
  font-size: $code-font-size;
  color: $kbd-color;
  background-color: $kbd-bg;
  @include border-radius($border-radius-sm);
  //@include box-shadow($kbd-box-shadow);

  kbd {
    padding: 0;
    font-size: 100%;
    font-weight: $nested-kbd-font-weight;
    //@include box-shadow(none);
  }
}

// Images

// Responsive images (ensure images don't scale beyond their parents)
//
// This is purposefully opt-in via an explicit class rather than being the default for all `<img>`s.
// We previously tried the "images are responsive by default" approach in Bootstrap v2,
// and abandoned it in Bootstrap v3 because it breaks lots of third-party widgets (including Google Maps)
// which weren't expecting the images within themselves to be involuntarily resized.
// See also https://github.com/twbs/bootstrap/issues/18178
.img-fluid {
  @include img-fluid;
}

// Image thumbnails
.img-thumbnail {
  padding: $thumbnail-padding;
  background-color: $thumbnail-bg;
  border: $thumbnail-border-width solid $thumbnail-border-color;
  @include border-radius($thumbnail-border-radius);
  //@include transition($thumbnail-transition);
  //@include box-shadow($thumbnail-box-shadow);

  // Keep them at most 100% wide
  @include img-fluid;
}

//
// Figures
//

.figure {
  // Ensures the caption's text aligns with the image.
  display: inline-block;
}

.figure-img {
  margin-bottom: ($spacer-y / 2);
  line-height: 1;
}

.figure-caption {
  font-size: $figure-caption-font-size;
  color: $figure-caption-color;
}

//
// Basic Bootstrap table
//

.table {
  width: 100%;
  max-width: 100%;
  margin-bottom: $spacer;

  th,
  td {
    padding: $table-cell-padding;
    vertical-align: top;
    border-top: $table-border-width solid $table-border-color;
  }

  thead th {
    vertical-align: bottom;
    border-bottom: (2 * $table-border-width) solid $table-border-color;
  }

  tbody + tbody {
    border-top: (2 * $table-border-width) solid $table-border-color;
  }
}


//
// Condensed table w/ half padding
//

.table-sm {
  th,
  td {
    padding: $table-sm-cell-padding;
  }
}


// Bordered version
//
// Add borders all around the table and between all the columns.

.table-bordered {
  border: $table-border-width solid $table-border-color;

  th,
  td {
    border: $table-border-width solid $table-border-color;
  }

  thead {
    th,
    td {
      border-bottom-width: (2 * $table-border-width);
    }
  }
}


// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

.table-striped {
  tbody tr:nth-of-type(odd) {
    background-color: $table-bg-accent;
  }
}


// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
  tbody tr {
    @include hover {
      background-color: $table-bg-hover;
    }
  }
}


// Table backgrounds
//
// Exact selectors below required to override `.table-striped` and prevent
// inheritance to nested tables.
.table {
  &-active {
    th,
    td {
      background-color: $table-bg-active;
    }
  }
  &-success {
    th,
    td {
      background-color: $state-success-bg;
    }
  }
  &-info {
    th,
    td {
      background-color: $state-info-bg;
    }
  }
  &-warning {
    th,
    td {
      background-color: $state-warning-bg;
    }
  }
  &-danger {
    th,
    td {
      background-color: $state-danger-bg;
    }
  }
}


// Inverse styles
//
// Same table markup, but inverted color scheme: dark background and light text.

.thead-inverse {
  th {
    color: $table-inverse-color;
    background-color: $table-inverse-bg;
  }
}

.thead-default {
  th {
    color: $table-head-color;
    background-color: $table-head-bg;
  }
}

.table-inverse {
  color: $table-inverse-color;
  background-color: $table-inverse-bg;

  th,
  td,
  thead th {
    border-color: $body-bg;
  }

  &.table-bordered {
    border: 0;
  }
}

//
// Textual form controls
//

.form-control {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  font-size: $font-size-base;
  line-height: $input-line-height;
  color: $input-color;
  background-color: $input-bg;
  border: $input-btn-border-width solid $input-border-color;

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  // Manually use the if/else instead of the mixin to account for iOS override
  border-radius: $input-border-radius;

  //@include box-shadow($input-box-shadow);
  //@include transition($input-transition);

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  // @include form-control-focus();

  // Placeholder
  &::placeholder {
    color: $input-color-placeholder;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-bg-disabled;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  &:disabled {
    cursor: $cursor-disabled;
  }
}

select.form-control {
  $select-border-width: ($border-width * 2);
  height: calc(#{$input-height} + #{$select-border-width});
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
  display: block;
}

//
// Labels
//

// For use with horizontal and inline forms, when you need the label text to
// align with the form controls.
.col-form-label {
  padding-top: calc(#{$input-padding-y} - #{$input-btn-border-width} * 2);
  padding-bottom: calc(#{$input-padding-y} - #{$input-btn-border-width} * 2);
  margin-bottom: 0; // Override the `<label>` default
}

.col-form-label-lg {
  padding-top: calc(#{$input-padding-y-lg} - #{$input-btn-border-width} * 2);
  padding-bottom: calc(#{$input-padding-y-lg} - #{$input-btn-border-width} * 2);
  font-size: $font-size-lg;
}

.col-form-label-sm {
  padding-top: calc(#{$input-padding-y-sm} - #{$input-btn-border-width} * 2);
  padding-bottom: calc(#{$input-padding-y-sm} - #{$input-btn-border-width} * 2);
  font-size: $font-size-sm;
}

//
// Legends
//

// For use with horizontal and inline forms, when you need the legend text to
// be the same size as regular labels, and to align with the form controls.
.col-form-legend {
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  margin-bottom: 0;
  font-size: $font-size-base;
}

// Static form control text
//
// Apply class to an element to make any string of text align with labels in a
// horizontal form layout.

.form-control-static {
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  line-height: $input-line-height;
  border: solid transparent;
  border-width: $input-btn-border-width 0;

  &.form-control-sm,
  &.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

.form-control-sm {
  padding: $input-padding-y-sm $input-padding-x-sm;
  font-size: $font-size-sm;
  @include border-radius($input-border-radius-sm);
}

select.form-control-sm {
  height: $input-height-sm;
}

.form-control-lg {
  padding: $input-padding-y-lg $input-padding-x-lg;
  font-size: $font-size-lg;
  @include border-radius($input-border-radius-lg);
}

select.form-control-lg {
  height: $input-height-lg;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}

.form-text {
  display: block;
  margin-top: $form-text-margin-top;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-check {
  position: relative;
  display: block;
  margin-bottom: $form-check-margin-bottom;

  &.disabled {
    .form-check-label {
      color: $text-muted;
      cursor: $cursor-disabled;
    }
  }
}

.form-check-label {
  padding-left: $form-check-input-gap;
  margin-bottom: 0; // Override default `<label>` bottom margin
  cursor: pointer;
}

.form-check-input {
  position: absolute;
  margin-top: $form-check-input-margin-y;
  margin-left: -$form-check-input-gap;

  &:only-child {
    position: static;
  }
}

// Radios and checkboxes on same line
.form-check-inline {
  display: inline-block;

  .form-check-label {
    vertical-align: middle;
  }

  + .form-check-inline {
    margin-left: $form-check-inline-margin-x;
  }
}

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.form-control-feedback {
  margin-top: $form-feedback-margin-top;
}

.form-control-success,
.form-control-warning,
.form-control-danger {
  padding-right: ($input-padding-x * 3);
  background-repeat: no-repeat;
  background-position: center right ($input-height / 4);
  background-size: ($input-height / 2) ($input-height / 2);
}

// Form validation states
.has-success {
 // @include form-control-validation($brand-success);

  .form-control-success {
    //background-image: $form-icon-success;
  }
}

.has-warning {
 // @include form-control-validation($brand-warning);

  .form-control-warning {
   // background-image: $form-icon-warning;
  }
}

.has-danger {
//  @include form-control-validation($brand-danger);

  .form-control-danger {
   // background-image: $form-icon-danger;
  }
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {
  display: flex;
  flex-flow: row wrap;
  align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

  // Because we use flex, the initial sizing of checkboxes is collapsed and
  // doesn't occupy the full-width (which is what we want for xs grid tier),
  // so we force that here.
  .form-check {
    width: 100%;
  }

  // Kick in the inline
  @include media-breakpoint-up(sm) {
    label {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 0;
    }

    // Inline-block all the things for "inline"
    .form-group {
      display: flex;
      flex: 0 0 auto;
      flex-flow: row wrap;
      align-items: center;
      margin-bottom: 0;
    }

    // Allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      width: auto;
    }

    .form-control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-check {
      display: flex;
      align-items: center;
      justify-content: center;
      width: auto;
      margin-top: 0;
      margin-bottom: 0;
    }
    .form-check-label {
      padding-left: 0;
    }
    .form-check-input {
      position: relative;
      margin-top: 0;
      margin-right: $form-check-input-margin-x;
      margin-left: 0;
    }

    // Custom form controls
    .custom-control {
      display: flex;
      align-items: center;
      justify-content: center;
      padding-left: 0;
    }
    .custom-control-indicator {
      position: static;
      display: inline-block;
      margin-right: $form-check-input-margin-x; // Flexbox alignment means we lose our HTML space here, so we compensate.
      vertical-align: text-bottom;
    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}

//
// Base styles
//

.btn {
  display: inline-block;
  font-weight: $btn-font-weight;
  line-height: $btn-line-height;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: $input-btn-border-width solid transparent;
  @include button-size($btn-padding-y, $btn-padding-x, $font-size-base, $btn-border-radius);
  //@include transition($btn-transition);

  // Share hover and focus styles
  @include hover-focus {
    text-decoration: none;
  }
  &:focus,
  &.focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    cursor: $cursor-disabled;
    opacity: .65;
    //@include box-shadow(none);
  }

  &:active,
  &.active {
    background-image: none;
   // @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset[disabled] a.btn {
  pointer-events: none;
}

//
// Alternate buttons
//

.btn-primary {
  @include button-variant($btn-primary-color, $btn-primary-bg, $btn-primary-border);
}
.btn-secondary {
  @include button-variant($btn-secondary-color, $btn-secondary-bg, $btn-secondary-border);
}
.btn-info {
  @include button-variant($btn-info-color, $btn-info-bg, $btn-info-border);
}
.btn-success {
  @include button-variant($btn-success-color, $btn-success-bg, $btn-success-border);
}
.btn-warning {
  @include button-variant($btn-warning-color, $btn-warning-bg, $btn-warning-border);
}
.btn-danger {
  @include button-variant($btn-danger-color, $btn-danger-bg, $btn-danger-border);
}

// Remove all backgrounds
.btn-outline-primary {
  @include button-outline-variant($btn-primary-bg);
}
.btn-outline-secondary {
  @include button-outline-variant($btn-secondary-border);
}
.btn-outline-info {
  @include button-outline-variant($btn-info-bg);
}
.btn-outline-success {
  @include button-outline-variant($btn-success-bg);
}
.btn-outline-warning {
  @include button-outline-variant($btn-warning-bg);
}
.btn-outline-danger {
  @include button-outline-variant($btn-danger-bg);
}


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  font-weight: $font-weight-normal;
  color: $link-color;
  border-radius: 0;

  &,
  &:active,
  &.active,
  &:disabled {
    background-color: transparent;
   // @include box-shadow(none);
  }
  &,
  &:focus,
  &:active {
    border-color: transparent;
  }
  @include hover {
    border-color: transparent;
  }
  @include hover-focus {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
    background-color: transparent;
  }
  &:disabled {
    color: $btn-link-disabled-color;

    @include hover-focus {
      text-decoration: none;
    }
  }
}


//
// Button Sizes
//

.btn-lg {
  // line-height: ensure even-numbered height of button next to large input
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $font-size-lg, $btn-border-radius-lg);
}
.btn-sm {
  // line-height: ensure proper height of button next to small input
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $font-size-sm, $btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
  display: block;
  width: 100%;
}

// Vertically space out multiple block buttons
.btn-block + .btn-block {
  margin-top: $btn-block-spacing-y;
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}


//
// Text
//

// Alignment

.text-nowrap { white-space: nowrap !important; }
.text-justify { text-align: justify !important; }

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    .text#{$infix}-left { text-align: left !important; }
    .text#{$infix}-right { text-align: right !important; }
    .text#{$infix}-center { text-align: center !important; }
  }
}

// Transformation

.text-lowercase  { text-transform: lowercase !important; }
.text-uppercase  { text-transform: uppercase !important; }
.text-capitalize { text-transform: capitalize !important; }

// Weight and italics

.font-weight-normal { font-weight: $font-weight-normal; }
.font-weight-bold   { font-weight: $font-weight-bold; } .blockquote
.font-italic        { font-style: italic; }

// Contextual colors

.text-white {
  
}

.text {
  &-white {
    color: $white !important;
  }
  &-muted {
    color: $text-muted !important;
  }
  &-primary {
    color: $brand-primary !important;
  }
  &-success {
    color: $brand-success !important;
  }
  &-info {
    color: $brand-info !important;
  }
  &-warning {
    color: $brand-warning !important;
  }
  &-danger {
    color: $brand-danger !important;
  }
}

a.text {
  &-white {
    @include hover-focus {
      color: darken($white, 10%);
    }
  }
  &-muted {
    @include hover-focus {
      color: darken($text-muted, 10%);
    }
  }
  &-primary {
    @include hover-focus {
      color: darken($brand-primary, 10%);
    }
  }
  &-success {
    @include hover-focus {
      color: darken($brand-success, 10%);
    }
  }
  &-info {
    @include hover-focus {
      color: darken($brand-info, 10%);
    }
  }
  &-warning {
    @include hover-focus {
      color: darken($brand-warning, 10%);
    }
  }
  &-danger {
    @include hover-focus {
      color: darken($brand-danger, 10%);
    }
  }
}

// Misc

.text-hide {
  @include text-hide();
}

//
// Contextual backgrounds
//

.bg {
  &-faded {
    background-color: darken($body-bg, 3%) !important;
  }
  &-primary {
    background-color: $brand-primary !important;
  }
  &-success {
    background-color: $brand-success !important;
  }
  &-info {
    background-color: $brand-info !important;
  }
  &-warning {
    background-color: $brand-warning !important;
  }
  &-danger {
    background-color: $brand-danger !important;
  }
  &-inverse {
    background-color: $brand-inverse !important;
  }
}

//
// Vertical align
//

.vertical-align-baseline    { vertical-align: baseline !important; } // Browser default
.vertical-align-top         { vertical-align: top !important; }
.vertical-align-middle      { vertical-align: middle !important; }
.vertical-align-bottom      { vertical-align: bottom !important; }
.vertical-align-text-bottom { vertical-align: text-bottom !important; }
.vertical-align-text-top    { vertical-align: text-top !important; }

//
// Borders
//

@each $border-type, $color in $border-colors {
  .border-#{$border-type} { border: $border-width $border-style $color; }
  .border-top-#{$border-type} { border-top: $border-width $border-style $color; }
  .border-right-#{$border-type} { border-right: $border-width $border-style $color; }
  .border-bottom-#{$border-type} { border-bottom: $border-width $border-style $color; }
  .border-left-#{$border-type} { border-left: $border-width $border-style $color; }

  @each $style in $border-styles {
    .border-#{$border-type}-#{$style} { border: $border-width $style $color; }
    .border-top-#{$border-type}-#{$style} { border-top: $border-width $style $color; }
    .border-right-#{$border-type}-#{$style} { border-right: $border-width $style $color; }
    .border-bottom-#{$border-type}-#{$style} { border-bottom: $border-width $style $color; }
    .border-left-#{$border-type}-#{$style} { border-left: $border-width $style $color; }
  }
}

@each $style in $border-styles {
  .border-style-#{$style} { border-style: $style !important; }
}

.border-0 { border: 0 !important; }
.border-top-0 { border-top: 0 !important; }
.border-right-0 { border-right: 0 !important; }
.border-bottom-0 { border-bottom: 0 !important; }
.border-left-0 { border-left: 0 !important; }

//
// Border-radius
//

.rounded {
  @include border-radius($border-radius);
}
.rounded-top {
  @include border-top-radius($border-radius);
}
.rounded-right {
  @include border-right-radius($border-radius);
}
.rounded-bottom {
  @include border-bottom-radius($border-radius);
}
.rounded-left {
  @include border-left-radius($border-radius);
}

.rounded-circle {
  border-radius: 50%;
}

.rounded-0 {
  border-radius: 0;
}

.clearfix {
  @include clearfix();
}

//
// Display utilities
//

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .d#{$infix}-none         { display: none !important; }
    .d#{$infix}-inline       { display: inline !important; }
    .d#{$infix}-inline-block { display: inline-block !important; }
    .d#{$infix}-block        { display: block !important; }
    .d#{$infix}-table        { display: table !important; }
    .d#{$infix}-table-cell   { display: table-cell !important; }
    .d#{$infix}-flex         { display: flex !important; }
    .d#{$infix}-inline-flex  { display: inline-flex !important; }
  }
}

//
// Floats
//

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .float#{$infix}-left  { @include float-left; }
    .float#{$infix}-right { @include float-right; }
    .float#{$infix}-none  { @include float-none; }
  }
}

// Positioning

.fixed-top {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: $zindex-fixed;
}

.fixed-bottom {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: $zindex-fixed;
}

// Width and height

@each $prop, $abbrev in (width: w, height: h) {
  @each $size, $length in $sizes {
    .#{$abbrev}-#{$size} { #{$prop}: $length !important; }
  }
}

.mw-100 { max-width: 100% !important; }
.mh-100 { max-height: 100% !important; }

// Margin and Padding

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop, $abbrev in (margin: m, padding: p) {
      @each $size, $lengths in $spacers {
        $length-x: map-get($lengths, x);
        $length-y: map-get($lengths, y);

        .#{$abbrev}#{$infix}-#{$size}  { #{$prop}:        $length-y $length-x !important; }
        .#{$abbrev}t#{$infix}-#{$size} { #{$prop}-top:    $length-y !important; }
        .#{$abbrev}r#{$infix}-#{$size} { #{$prop}-right:  $length-x !important; }
        .#{$abbrev}b#{$infix}-#{$size} { #{$prop}-bottom: $length-y !important; }
        .#{$abbrev}l#{$infix}-#{$size} { #{$prop}-left:   $length-x !important; }
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length-x !important;
          #{$prop}-left:  $length-x !important;
        }
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top:    $length-y !important;
          #{$prop}-bottom: $length-y !important;
        }
      }
    }

    // Some special margin utils
    .m#{$infix}-auto  { margin:        auto !important; }
    .mt#{$infix}-auto { margin-top:    auto !important; }
    .mr#{$infix}-auto { margin-right:  auto !important; }
    .mb#{$infix}-auto { margin-bottom: auto !important; }
    .ml#{$infix}-auto { margin-left:   auto !important; }
    .mx#{$infix}-auto {
      margin-right: auto !important;
      margin-left:  auto !important;
    }
    .my#{$infix}-auto {
      margin-top:    auto !important;
      margin-bottom: auto !important;
    }
  }
}

//
// Visibility utilities
//

.invisible {
  @include invisible();
}

// Responsive visibility utilities

@each $bp in map-keys($grid-breakpoints) {
  .hidden-#{$bp}-up {
    @include media-breakpoint-up($bp) {
      display: none !important;
    }
  }
  .hidden-#{$bp}-down {
    @include media-breakpoint-down($bp) {
      display: none !important;
    }
  }
}
